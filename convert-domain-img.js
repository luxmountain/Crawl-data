// Chuy·ªÉn domain ·∫£nh c·ªßa web crawl l√™n cloundinary ho·∫∑c imgur c·ªß·∫£ m√¨nh

const axios = require("axios");
const FormData = require("form-data");

// 1. L·∫•y to√†n b·ªô posts
async function fetchPosts() {
  const res = await axios.get("http://localhost:3000/api/pins");
  return res.data;
}

// 2. T·∫£i ·∫£nh t·ª´ image_url v·ªÅ buffer
async function downloadImage(imageUrl) {
  const response = await axios.get(imageUrl, { responseType: "arraybuffer" });
  return response.data;
}

// ‚úÖ 3. G·ª≠i ·∫£nh l√™n Cloudinary qua API upload (ƒë√∫ng ƒë·ªãnh d·∫°ng API b·∫°n vi·∫øt)
async function uploadImageToCloudinary(imageBuffer, filename) {
  const form = new FormData();
  form.append("image", imageBuffer, { filename }); // üëà ph·∫£i l√† "image", kh√¥ng ph·∫£i "file"

  const res = await axios.post(
    "http://localhost:3000/api/upload",
    form,
    {
      headers: {
        ...form.getHeaders(),
      },
    }
  );

  return res.data.link; // üëà v√¨ API tr·∫£ v·ªÅ { link: result.secure_url }
}

// 4. C·∫≠p nh·∫≠t image_url m·ªõi cho post
async function updatePostImageUrl(pid, newImageUrl) {
  const res = await axios.put("http://localhost:3000/api/pins/update-image", {
    pid,
    image_url: newImageUrl,
  });
  return res.data;
}

// Main ch·∫°y tu·∫ßn t·ª±
async function main() {
  try {
    const posts = await fetchPosts();
    for (const post of posts) {
      if (!post.image_url) continue;

      if (!post.image_url.startsWith("https://i.pinimg.com/")) {
        console.log(`B·ªè qua post pid=${post.pid} v√¨ kh√¥ng ph·∫£i ·∫£nh t·ª´ cdn.promptden.com`);
        continue;
      }

      console.log(`X·ª≠ l√Ω post pid=${post.pid}`);

      try {
        const imageBuffer = await downloadImage(post.image_url);
        const filename = `post_${post.pid}.jpg`;

        const cloudinaryUrl = await uploadImageToCloudinary(imageBuffer, filename);
        console.log("·∫¢nh upload cloudinary:", cloudinaryUrl);

        const updateRes = await updatePostImageUrl(post.pid, cloudinaryUrl);
        console.log("C·∫≠p nh·∫≠t th√†nh c√¥ng:", updateRes.message);
      } catch (e) {
        console.error("L·ªói x·ª≠ l√Ω post pid=", post.pid, e.message);
      }
    }
  } catch (error) {
    console.error("L·ªói l·∫•y posts:", error.message);
  }
}

main();
